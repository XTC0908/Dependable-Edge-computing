# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edge_info/vhc_geo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg

class vhc_geo(genpy.Message):
  _md5sum = "cfafd41cb4021d78978805fcb28453a7"
  _type = "edge_info/vhc_geo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 vhcid
geographic_msgs/GeoPoint geo

================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude
"""
  __slots__ = ['vhcid','geo']
  _slot_types = ['uint32','geographic_msgs/GeoPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vhcid,geo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vhc_geo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vhcid is None:
        self.vhcid = 0
      if self.geo is None:
        self.geo = geographic_msgs.msg.GeoPoint()
    else:
      self.vhcid = 0
      self.geo = geographic_msgs.msg.GeoPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3d().pack(_x.vhcid, _x.geo.latitude, _x.geo.longitude, _x.geo.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.geo is None:
        self.geo = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vhcid, _x.geo.latitude, _x.geo.longitude, _x.geo.altitude,) = _get_struct_I3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3d().pack(_x.vhcid, _x.geo.latitude, _x.geo.longitude, _x.geo.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.geo is None:
        self.geo = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vhcid, _x.geo.latitude, _x.geo.longitude, _x.geo.altitude,) = _get_struct_I3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3d = None
def _get_struct_I3d():
    global _struct_I3d
    if _struct_I3d is None:
        _struct_I3d = struct.Struct("<I3d")
    return _struct_I3d
