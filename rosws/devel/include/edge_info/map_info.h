// Generated by gencpp from file edge_info/map_info.msg
// DO NOT EDIT!


#ifndef EDGE_INFO_MESSAGE_MAP_INFO_H
#define EDGE_INFO_MESSAGE_MAP_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geographic_msgs/WayPoint.h>
#include <geographic_msgs/RouteSegment.h>
#include <geographic_msgs/RoutePath.h>

namespace edge_info
{
template <class ContainerAllocator>
struct map_info_
{
  typedef map_info_<ContainerAllocator> Type;

  map_info_()
    : header()
    , WayPoints()
    , RouteSegments()
    , RoutePaths()  {
    }
  map_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , WayPoints(_alloc)
    , RouteSegments(_alloc)
    , RoutePaths(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geographic_msgs::WayPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geographic_msgs::WayPoint_<ContainerAllocator> >::other >  _WayPoints_type;
  _WayPoints_type WayPoints;

   typedef std::vector< ::geographic_msgs::RouteSegment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geographic_msgs::RouteSegment_<ContainerAllocator> >::other >  _RouteSegments_type;
  _RouteSegments_type RouteSegments;

   typedef std::vector< ::geographic_msgs::RoutePath_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geographic_msgs::RoutePath_<ContainerAllocator> >::other >  _RoutePaths_type;
  _RoutePaths_type RoutePaths;





  typedef boost::shared_ptr< ::edge_info::map_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edge_info::map_info_<ContainerAllocator> const> ConstPtr;

}; // struct map_info_

typedef ::edge_info::map_info_<std::allocator<void> > map_info;

typedef boost::shared_ptr< ::edge_info::map_info > map_infoPtr;
typedef boost::shared_ptr< ::edge_info::map_info const> map_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edge_info::map_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edge_info::map_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace edge_info

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'edge_info': ['/home/yulans/Documents/edge/cnedge/Dependable-Edge-computing/rosws/src/edge_info/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::edge_info::map_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edge_info::map_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edge_info::map_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edge_info::map_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edge_info::map_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edge_info::map_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edge_info::map_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07072df7d6cc23281dae048c2f9a3fa0";
  }

  static const char* value(const ::edge_info::map_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07072df7d6cc2328ULL;
  static const uint64_t static_value2 = 0x1dae048c2f9a3fa0ULL;
};

template<class ContainerAllocator>
struct DataType< ::edge_info::map_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edge_info/map_info";
  }

  static const char* value(const ::edge_info::map_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edge_info::map_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geographic_msgs/WayPoint[] WayPoints\n\
geographic_msgs/RouteSegment[] RouteSegments\n\
geographic_msgs/RoutePath[] RoutePaths \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geographic_msgs/WayPoint\n\
# Way-point element for a geographic map.\n\
\n\
uuid_msgs/UniqueID id   # Unique way-point identifier\n\
GeoPoint   position     # Position relative to WGS 84 ellipsoid\n\
KeyValue[] props        # Key/value properties for this point\n\
\n\
================================================================================\n\
MSG: uuid_msgs/UniqueID\n\
# A universally unique identifier (UUID).\n\
#\n\
#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n\
#  http://tools.ietf.org/html/rfc4122.html\n\
\n\
uint8[16] uuid\n\
\n\
================================================================================\n\
MSG: geographic_msgs/GeoPoint\n\
# Geographic point, using the WGS 84 reference ellipsoid.\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south\n\
# (-90 <= latitude <= +90).\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is\n\
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n\
# +90, and longitude is irrelevant, but must be in range.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n\
float64 altitude\n\
\n\
================================================================================\n\
MSG: geographic_msgs/KeyValue\n\
# Geographic map tag (key, value) pair\n\
#\n\
# This is equivalent to diagnostic_msgs/KeyValue, repeated here to\n\
# avoid introducing a trivial stack dependency.\n\
\n\
string key                     # tag label\n\
string value                   # corresponding value\n\
\n\
================================================================================\n\
MSG: geographic_msgs/RouteSegment\n\
# Route network segment.\n\
#\n\
# This is one directed edge of a RouteNetwork graph. It represents a\n\
# known path from one way point to another.  If the path is two-way,\n\
# there will be another RouteSegment with \"start\" and \"end\" reversed.\n\
\n\
uuid_msgs/UniqueID id           # Unique identifier for this segment\n\
\n\
uuid_msgs/UniqueID start        # beginning way point of segment\n\
uuid_msgs/UniqueID end          # ending way point of segment\n\
\n\
KeyValue[] props                # segment properties\n\
\n\
================================================================================\n\
MSG: geographic_msgs/RoutePath\n\
# Path through a route network.\n\
#\n\
# A path is a sequence of RouteSegment edges.  This information is\n\
# extracted from a RouteNetwork graph.  A RoutePath lists the route\n\
# segments needed to reach some chosen goal.\n\
\n\
Header header\n\
\n\
uuid_msgs/UniqueID   network    # Route network containing this path\n\
uuid_msgs/UniqueID[] segments   # Sequence of RouteSegment IDs\n\
KeyValue[]           props      # Key/value properties\n\
";
  }

  static const char* value(const ::edge_info::map_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edge_info::map_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.WayPoints);
      stream.next(m.RouteSegments);
      stream.next(m.RoutePaths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct map_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edge_info::map_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edge_info::map_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "WayPoints[]" << std::endl;
    for (size_t i = 0; i < v.WayPoints.size(); ++i)
    {
      s << indent << "  WayPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geographic_msgs::WayPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.WayPoints[i]);
    }
    s << indent << "RouteSegments[]" << std::endl;
    for (size_t i = 0; i < v.RouteSegments.size(); ++i)
    {
      s << indent << "  RouteSegments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geographic_msgs::RouteSegment_<ContainerAllocator> >::stream(s, indent + "    ", v.RouteSegments[i]);
    }
    s << indent << "RoutePaths[]" << std::endl;
    for (size_t i = 0; i < v.RoutePaths.size(); ++i)
    {
      s << indent << "  RoutePaths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geographic_msgs::RoutePath_<ContainerAllocator> >::stream(s, indent + "    ", v.RoutePaths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDGE_INFO_MESSAGE_MAP_INFO_H
